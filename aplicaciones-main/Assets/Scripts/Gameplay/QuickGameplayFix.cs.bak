using UnityEngine;

/// <summary>
/// Script para solucionar problemas de carga lenta del gameplay
/// Permite desactivar videos temporalmente para testing r√°pido
/// </summary>
public class QuickGameplayFix : MonoBehaviour
{
    [Header("Quick Fixes")]
    public bool disableVideosForFastLoading = true;
    public bool skipVideoTimeout = true;
    public float quickVideoTimeout = 3f; // Timeout m√°s corto para testing
    
    [Header("Performance")]
    public bool optimizeVideoSettings = true;
    public bool showLoadingInfo = true;
    
    void Start()
    {
        if (disableVideosForFastLoading || skipVideoTimeout)
        {
            ApplyQuickFixes();
        }
    }
    
    [ContextMenu("Apply Quick Fixes")]
    public void ApplyQuickFixes()
    {
        Debug.Log("üöÄ Aplicando correcciones r√°pidas para gameplay...");
        
        if (disableVideosForFastLoading)
        {
            DisableVideosTemporarily();
        }
        
        if (skipVideoTimeout)
        {
            SetQuickVideoTimeout();
        }
        
        if (optimizeVideoSettings)
        {
            OptimizeVideoSettings();
        }
        
        Debug.Log("‚úÖ Correcciones r√°pidas aplicadas");
    }
    
    void DisableVideosTemporarily()
    {
        BackgroundVideoManager videoManager = FindFirstObjectByType<BackgroundVideoManager>();
        if (videoManager != null)
        {
            videoManager.enableBackgroundVideo = false;
            Debug.Log("üé¨ Videos desactivados temporalmente para carga r√°pida");
        }
    }
    
    void SetQuickVideoTimeout()
    {
        BackgroundVideoManager videoManager = FindFirstObjectByType<BackgroundVideoManager>();
        if (videoManager != null)
        {
            videoManager.videoLoadTimeout = quickVideoTimeout;
            videoManager.skipVideoOnTimeout = true;
            Debug.Log($"‚è±Ô∏è Timeout de video reducido a {quickVideoTimeout}s");
        }
    }
    
    void OptimizeVideoSettings()
    {
        BackgroundVideoManager videoManager = FindFirstObjectByType<BackgroundVideoManager>();
        if (videoManager != null)
        {
            // Configuraci√≥n optimizada para carga r√°pida
            videoManager.videoOpacity = 0.6f; // Menos intenso
            Debug.Log("‚ö° Configuraci√≥n de video optimizada");
        }
    }
    
    [ContextMenu("Enable Videos")]
    public void EnableVideos()
    {
        BackgroundVideoManager videoManager = FindFirstObjectByType<BackgroundVideoManager>();
        if (videoManager != null)
        {
            videoManager.enableBackgroundVideo = true;
            videoManager.videoLoadTimeout = 10f; // Timeout normal
            Debug.Log("üé¨ Videos reactivados");
        }
    }
    
    [ContextMenu("Disable Videos")]
    public void DisableVideos()
    {
        BackgroundVideoManager videoManager = FindFirstObjectByType<BackgroundVideoManager>();
        if (videoManager != null)
        {
            videoManager.enableBackgroundVideo = false;
            Debug.Log("üé¨ Videos desactivados");
        }
    }
    
    [ContextMenu("Test Gameplay Loading")]
    public void TestGameplayLoading()
    {
        Debug.Log("üß™ Iniciando test de carga de gameplay...");
        
        // Desactivar videos temporalmente
        DisableVideosTemporarily();
        
        // Verificar componentes necesarios
        GameplayManager gameplayManager = FindFirstObjectByType<GameplayManager>();
        if (gameplayManager != null)
        {
            Debug.Log("‚úÖ GameplayManager encontrado");
        }
        else
        {
            Debug.LogError("‚ùå GameplayManager no encontrado");
        }
        
        // Verificar audio source
        AudioSource audioSource = FindFirstObjectByType<AudioSource>();
        if (audioSource != null)
        {
            Debug.Log("‚úÖ AudioSource encontrado");
        }
        else
        {
            Debug.LogWarning("‚ö†Ô∏è AudioSource no encontrado");
        }
        
        Debug.Log("üß™ Test completado - Revisa la consola para detalles");
    }
    
    void Update()
    {
        // Teclas de acceso r√°pido
        if (Input.GetKeyDown(KeyCode.F5))
        {
            DisableVideos();
        }
        
        if (Input.GetKeyDown(KeyCode.F6))
        {
            EnableVideos();
        }
        
        if (Input.GetKeyDown(KeyCode.F7))
        {
            TestGameplayLoading();
        }
    }
    
    void OnGUI()
    {
        if (!showLoadingInfo) return;
        
        GUILayout.BeginArea(new Rect(Screen.width - 250, 10, 240, 150));
        GUILayout.Label("üöÄ QUICK GAMEPLAY FIX");
        
        BackgroundVideoManager videoManager = FindFirstObjectByType<BackgroundVideoManager>();
        bool videosEnabled = videoManager?.enableBackgroundVideo ?? false;
        
        GUILayout.Label($"Videos: {(videosEnabled ? "ENABLED" : "DISABLED")}");
        
        if (videoManager != null)
        {
            GUILayout.Label($"Timeout: {videoManager.videoLoadTimeout:F1}s");
        }
        
        GUILayout.Label("");
        GUILayout.Label("F5 - Disable Videos");
        GUILayout.Label("F6 - Enable Videos");
        GUILayout.Label("F7 - Test Loading");
        GUILayout.EndArea();
    }
}
